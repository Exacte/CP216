00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 2/28/2016 11:14:04 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Program    : io_util
00000000                             3  * Written by : David Brown
00000000                             4  * Date       : 2016-01-25
00000000                             5  * Description: Printing utilities
00000000                             6  *
00000000                             7  * Three registers have special functions:
00000000                             8  * D0 contains the task code telling the simulator the type
00000000                             9  *           of I/O to perform
00000000                            10  * D1 contains either the data or the length of the data
00000000                            11  *           involved in I/O depending on the task
00000000                            12  * A1 contains the address of strings to be input or output
00000000                            13  *           or the path of the file to be used in I/O
00000000                            14  *-----------------------------------------------------------
00000000                            15  * Prints the prompt at A1 and reads a number into D1.
00000000  48E7 8000                 16  P_PRMPT   MOVEM.L   D0,-(SP)                Preserve D0
00000004  7012                      17              MOVEQ.L #18,D0                  Set up prompt and read number into D1.L
00000006  4E4F                      18              TRAP    #15
00000008  4CDF 0001                 19              MOVEM.L (SP)+,D0                Restore D0
0000000C  4E75                      20              RTS
0000000E                            21  
0000000E                            22  * Prints the prompt at A1 and reads a string into D1.
0000000E  48E7 8040                 23  P_STR_LEN   MOVEM.L D0/A1,-(SP)             Preserve D0 and A1
00000012  43F9 000000E1             24              LEA     TA,A1                   Move throw away variable pointer to A1
00000018  7002                      25              MOVEQ.L #2,D0                   Set up to read string into A1 and length into D1.L
0000001A  4E4F                      26              TRAP    #15                     
0000001C  4CDF 0201                 27              MOVEM.L (SP)+,D0/A1             Restore D0 and A1
00000020  4E75                      28              RTS
00000022                            29  
00000022                            30  * Prints the mesage at A1 and the value at D1
00000022  48E7 8000                 31  P_NUM       MOVEM.L D0,-(SP)                Preserve D0
00000026  7011                      32              MOVEQ   #17,D0                  Set up to print D1.L without CR/LF
00000028  4E4F                      33              TRAP    #15                     Print the number
0000002A  4CDF 0001                 34              MOVEM.L (SP)+,D0                Restore D0
0000002E  4E75                      35              RTS
00000030                            36              
00000030                            37  * Prints a string with CR/LF
00000030  48E7 8000                 38  P_STR       MOVEM.L D0,-(SP)                Preserve D0
00000034  700D                      39              MOVEQ   #13,D0                  Set up to print string at A1 with CR/LF
00000036  4E4F                      40              TRAP    #15                     Print the string
00000038  4CDF 0001                 41              MOVEM.L (SP)+,D0                Restore D0
0000003C  4E75                      42              RTS
0000003E                            43  
0000003E                            44  * Prints a CR/LF
0000003E  48E7 8040                 45  P_CRLF      MOVEM.L D0/A1,-(SP)             Preserve D0 and A1
00000042  700D                      46              MOVEQ.L #13,D0                  Set up print with CRLF
00000044  43F9 000000E0             47              LEA     NULL,A1                 Set null string
0000004A  4E4F                      48              TRAP    #15
0000004C  4CDF 0201                 49              MOVEM.L (SP)+,D0/A1             Restore D0 and A1
00000050  4E75                      50              RTS
00000052                            51  
00000052                            52  * Prints a signed BCD number
00000052  48E7 E0C0                 53  P_BCD       MOVEM.L D0/D1/D2/A0/A1,-(SP)
00000056  23C1 000000E8             54              MOVE.L  D1,HOLD
0000005C  41F9 000000E8             55              LEA     HOLD,A0
00000062  43F9 000000EE             56              LEA     UNPCKD,A1
00000068  2401                      57              MOVE.L  D1,D2
0000006A  5239 000000E6             58  N_TST_LOOP  ADD.B   #1,LEN
00000070  E88A                      59              LSR.L   #4,D2
00000072  B4B9 000000E2             60              CMP.L   END_CHK,D2
00000078  6EF0                      61              BGT     N_TST_LOOP
0000007A                            62              
0000007A  B4BC 00000005             63              CMP.L   #5,D2
00000080  6D00 0016                 64              BLT     HERE
00000084                            65  
00000084  41F9 000000EC             66              LEA     HOLD+4,A0
0000008A  143C 0002                 67              MOVE.B  #2,D2
0000008E                            68              
0000008E  4820                      69  NBCD_LOOP   NBCD    -(A0)
00000090  51CA FFFC                 70              DBRA    D2,NBCD_LOOP
00000094  32FC 00FD                 71              MOVE.W  #$FD,(A1)+
00000098                            72              
00000098  4282                      73  HERE        CLR.L   D2
0000009A  143C 0003                 74              MOVE.B  #3,D2
0000009E                            75  
0000009E  4281                      76  UNPCK_LOOP  CLR.L   D1
000000A0  1218                      77              MOVE.B  (A0)+,D1
000000A2  E949                      78              LSL.W   #4,D1
000000A4  E809                      79              LSR.B   #4,D1
000000A6  32C1                      80              MOVE.W  D1,(A1)+
000000A8  51CA FFF4                 81              DBRA    D2,UNPCK_LOOP
000000AC                            82              
000000AC  4281                      83              CLR.L   D1
000000AE  4282                      84              CLR.L   D2
000000B0  43F9 000000EE             85              LEA     UNPCKD,A1
000000B6  5289                      86              ADD.L   #1,A1
000000B8  5239 000000E6             87              ADD.B   #1,LEN
000000BE  1439 000000E6             88              MOVE.B  LEN,D2
000000C4  1219                      89  ASCII_LOOP  MOVE.B  (A1)+,D1
000000C6  0601 0030                 90              ADD.B   #$30,D1
000000CA  7006                      91              MOVEQ.L #6,D0
000000CC  4E4F                      92              TRAP    #15
000000CE  51CA FFF4                 93              DBRA    D2,ASCII_LOOP
000000D2  13FC 0000 000000E6        94              MOVE.B  #0,LEN
000000DA                            95              
000000DA  4CDF 0307                 96              MOVEM.L (SP)+,D0/D1/D2/A0/A1
000000DE  4E75                      97              RTS          
000000E0                            98  
000000E0                            99  
000000E0                           100  * Constants and data.
000000E0= 00                       101  NULL        DC.B    0                       Empty string
000000E1= 00                       102  TA          DC.B    0
000000E2= 00000010                 103  END_CHK     DC.L    $10
000000E6= 00                       104  LEN         DC.B    0
000000E7= 08                       105  POS         DC.B    8
000000E8                           106  HOLD        DS.B    6
000000EE                           107  UNPCKD      DS.W    4
000000F6                           108  
000000F6                           109  *~Font name~Courier New~
000000F6                           110  *~Font size~10~
000000F6                           111  *~Tab type~0~
000000F6                           112  *~Tab size~8~
000000F6                           113  
000000F6                           114  
000000F6                           115  
000000F6                           116  
000000F6                           117  
000000F6                           118  
000000F6                           119  
Line 120 WARNING: END directive missing, starting address not set

No errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASCII_LOOP          C4
END_CHK             E2
HERE                98
HOLD                E8
LEN                 E6
NBCD_LOOP           8E
NULL                E0
N_TST_LOOP          6A
POS                 E7
P_BCD               52
P_CRLF              3E
P_NUM               22
P_PRMPT             0
P_STR               30
P_STR_LEN           E
TA                  E1
UNPCKD              EE
UNPCK_LOOP          9E
